#define _CRT_SECURE_NO_WARNINGS 1
#include <iostream>
#include <stdio.h>
#include <math.h>


/*==================================================================
				函数：1.输出较大值：int MAX（int a,int b）
					  2.交换两个数：void swap（int *pa,int *pb）
					  3.判断一个数是否为素数:int is_prime(int x)
					  4.判断年份是不是闰年：int is_leap_year(int x) 
					  5.二分查找：int binary_search()
===================================================================*/

int MAX (int a,int b);
void swap(int* pa, int* pb);
int is_prime(int x);
int is_leap_year(int x);
int binary_search(int arr[],int x, int sz);
int main()
{

	int a = 30;
	int b = 20;
	int count = 0;

	///*交换两个数位置*/
	//printf("a=%d b=%d\n\n", a, b);
	//swap(&a, &b);
	//printf("交换a，b：a=%d b=%d\n\n", a, b);


	///*输出较大值*/
	//int max =MAX(a,b);
	//printf("较大值为：%d\n\n", max);


	///*素数判断*/
	//for (int i = 100; i <= 200; i++)
	//{
	//	if (is_prime(i) == 1)
	//		printf("%d ", i);
	//}
	//printf("\n\n");



	///*闰年判断*/
	//for (int year = 1000; year <= 2000; year++)
	//{
	//	if (is_leap_year(year) == 1)
	//	{ 
	//		printf("%d ",year);
	//		count++;
	//	}
	//}
	//printf("count:%d\n\n", count);


	/*二分法查找*/
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	int k = 17;
	int p = binary_search( arr, k,sz);
	if (p == -1)
		printf("找不到");
	else
		printf("找到了下标为：%d", p);

	return 0;
};
/*输出较大值*/
//int MAX (int a,int b)
//{
//	
//
//	if (a < b)
//	{
//		return b;
//	}
//	else
//	{
//		return a;
//	}
//}
///*交换两个数位置*/
//void swap(int* pa, int* pb)
//{
//	int tmp = 0;
//	tmp = *pa;
//	*pa = *pb;
//	*pb = tmp;
//}
///*素数判断*/
//int is_prime(int x)
//{
//	int i = 0;
//	for ( i = 2; i <= sqrt(x); i++)
//	{
//		if (x % i == 0)
//		{
//			return 0;
//		}
//		
//	}
//	return 1;
//}
///*闰年判断*/
//int is_leap_year(int x)
//{
//	if ((x % 400 == 0) || ((x % 4 == 0) && (x % 100 != 0)))
//	{
//		return 1;
//	}
//	else return 0;
//}
/*二分查找*/
int binary_search(int arr[], int x, int sz)
{

	int left = 0;
	int right = sz-1;
	
	while (left<=right)
	{
		int mid = (left + right) / 2;
		if (arr[mid] < x)
		{
			left = mid + 1;
		}
		else if (arr[mid] > x)
		{
			right = mid - 1;
		}
		else
		{
			return mid;
		}
	}
	return -1;
}


